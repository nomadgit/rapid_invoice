require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe ClientsController do

  #let(:valid_session) { {} }
  let(:client) { FactoryGirl.create :client }
  describe "GET index" do
    it 'assigns all clients as @clients' do
      get :index
      expect(assigns(:clients)).to eq([client])
    end

    it 'renders the :index view' do
      get :index
      expect(response).to render_template :index
    end
  end

  describe "GET show" do
    
    it "assigns the requested client as @client" do
      get :show, {:id => client.to_param}
      expect(assigns(:client)).to eq(client)
    end
    it "renders the :show template" do
      get :show, {:id => client.to_param}
      expect(response).to render_template :show
    end
  end

  describe "GET new" do
    it "assigns a new client as @client" do
      get :new
      expect(assigns(:client)).to be_a_new(Client)
    end
  end

  describe "GET edit" do
    it "assigns the requested client as @client" do
      get :edit, {:id => client.to_param}
      expect(assigns(:client)).to eq(client)
    end
  end

  describe "POST create" do
    describe "with valid attributes" do
      it "creates a new Client" do
        expect {
          post :create, {:client => attributes_for(:client)}
        }.to change(Client, :count).by(1)
      end

      it "redirects to the index page" do
        post :create, {:client => attributes_for(:client)}
        expect(response).to redirect_to clients_url
      end

    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved client as @client" do
        post :create, {:client => attributes_for(:invalid_client)}
        expect(assigns(:client)).to be_a_new(Client)
      end

      it "re-renders the 'new' template" do
        post :create, {:client => attributes_for(:invalid_client)}
        expect(response).to render_template :new
      end
    end
  end

  describe "PUT update" do
    let(:valid_attributes) { attributes_for(:client, email: 'payments@johnnysautos.com')}

    it "assigns the requested client as @client" do
      put :update, {:id => client.to_param, :client => valid_attributes}
      expect(assigns(:client)).to eq(client)
    end
    describe "with valid attributes" do
      it "updates the requested client" do
        put :update, {:id => client.to_param, :client => valid_attributes}
        client.reload
        expect(client.email).to eq('payments@johnnysautos.com')
      end

      it "redirects to the index page" do
        put :update, {:id => client.to_param, :client => valid_attributes}
        expect(response).to redirect_to clients_url
      end
    end

    describe "with invalid params" do
      let(:invalid_attributes) { attributes_for(:client, email: 'payments@johnnysautos')}

      it "does not update the requested client" do
        put :update, {:id => client.to_param, :client => invalid_attributes}
        client.reload
        expect(client.email).to eq('payments@johnnysautos')
      end

      it "re-renders the 'edit' template" do
        put :update, {:id => client.to_param, :client => invalid_attributes}
        expect(response).to render_template("edit")
      end      
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested client" do
      expect {
        delete :destroy, {:client => client.to_param}
      }.to change(Client, :count).by(-1)
    end

    it "redirects to the index page" do
      delete :destroy, {:client => client.to_param}
      expect(response).to redirect_to clients_url
    end
    
  end

end
